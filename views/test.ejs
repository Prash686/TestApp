<% layout('boilerplate') %>
<body>
  <div id="form-container">
    <div id="progress-bar-container">
      <div id="progress-bar"></div>
    </div>

    <div id="timer">Time left: <span id="time-left">10:00</span></div>

    <h3>Question <span id="question-number">1</span> of <%= allquestions.length %></h3>

    <input type="hidden" id="questions-data" value="<%- JSON.stringify(allquestions).replace(/"/g, '&quot;') %>">

    <form id="Test-form">
      <div id="question-container">
      </div>

      <div id="form-buttons">
        <button type="button" id="prev-btn" class="form-button" disabled aria-label="Previous Question">Previous</button>
        <button type="button" id="next-btn" class="form-button" aria-label="Next Question">Next</button>
        <button type="button" id="save-progress-btn" class="form-button" aria-label="Save Progress">Save Progress</button>
        <button type="button" id="end-exam-btn" class="form-button" aria-label="End Exam">End Exam</button>
      </div>
    </form>

    <button type="button" id="review-btn" class="form-button" style="display:none;">Review Answers</button>
  </div>

  <div id="message-box" class="message-box hidden"></div>

  <script>
    try {
      let jsonData = document.getElementById('questions-data').value;
      const cleanedJsonData = jsonData.replace(/&quot;/g, '"');
      const questions = JSON.parse(cleanedJsonData);

      const questionContainer = document.getElementById('question-container');
      const questionNumber = document.getElementById('question-number');
      const prevBtn = document.getElementById('prev-btn');
      const nextBtn = document.getElementById('next-btn');
      const saveProgressBtn = document.getElementById('save-progress-btn');
      const reviewBtn = document.getElementById('review-btn');
      const endExamBtn = document.getElementById('end-exam-btn');
      const messageBox = document.getElementById('message-box');
      let currentQuestionIndex =  0;

      let selectedAnswers = {};
      let totalMarks = 0;
      let totalTime = 600;
      const timerElement = document.getElementById('time-left');
      let timerInterval;
      let examEnded = false;

      function showMessage(message, type = 'info') {
        messageBox.textContent = message;
        messageBox.className = `message-box ${type}`;
        messageBox.classList.remove('hidden');
        setTimeout(() => {
          messageBox.classList.add('hidden');
        }, 3000);
      }

      function renderQuestion(index) {
        if (!questions || questions.length === 0) {
          questionContainer.textContent = 'No questions available.';
          return;
        }

        const question = questions[index];
        questionContainer.innerHTML = '';

        const questionText = document.createElement('p');
        questionText.classList.add('question-text');
        questionText.textContent = `Q. ${question.question} (marks ${question.marks})`;
        questionContainer.appendChild(questionText);

        for (let i = 1; i <= 4; i++) {
          const div = document.createElement('div');
          div.classList.add('form-check');

          const input = document.createElement('input');
          input.type = 'radio';
          input.classList.add('form-check-input');
          input.name = 'answer';
          input.id = `option${i}`;
          input.value = `option${i}`;

          const label = document.createElement('label');
          label.classList.add('form-check-label');
          label.setAttribute('for', `option${i}`);
          label.textContent = `${question[`option${i}`]}`;

          if (selectedAnswers[index] === `option${i}`) {
            input.checked = true;
          }

          div.appendChild(input);
          div.appendChild(label);
          questionContainer.appendChild(div);
        }

        questionNumber.textContent = index + 1;
        prevBtn.disabled = index === 0;
        nextBtn.disabled = index === questions.length - 1;

        updateProgressBar();
      }

      function saveAnswer() {
        const selectedOption = document.querySelector('input[name="answer"]:checked');
        if (selectedOption) {
          selectedAnswers[currentQuestionIndex] = selectedOption.value;
        } else {
          delete selectedAnswers[currentQuestionIndex];
        }
      }

      function updateProgressBar() {
        const progress = ((currentQuestionIndex + 1) / questions.length) * 100;
        document.getElementById('progress-bar').style.width = `${progress}%`;
      }

      function startTimer() {
        timerInterval = setInterval(() => {
          if (examEnded) return; // Prevent timer updates if exam has ended

          const minutes = Math.floor(totalTime / 60);
          const seconds = totalTime % 60;
          timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
          totalTime--;
          if (totalTime < 0) {
            clearInterval(timerInterval);
            showMessage("Time's up!", 'warning');
            calculateTotalMarks();
            showReview();
          }
        }, 1000);
      }

      function calculateTotalMarks() {
        totalMarks = 0;
        questions.forEach((question, index) => {
          if (selectedAnswers[index] === question.Answer) {
            totalMarks += parseInt(question.marks);
          }
        });
      }

      function showReview() {
        document.getElementById('Test-form').style.display = 'none';
        reviewBtn.style.display = 'block';

        const reviewContainer = document.createElement('div');
        reviewContainer.id = 'review-container';

        questions.forEach((question, index) => {
          const reviewItem = document.createElement('div');
          reviewItem.classList.add('review-item');

          reviewItem.innerHTML = `<p>Q. ${question.question} <br>`;

          for (let i = 1; i <= 4; i++) {
            const optionValue = `option${i}`;
            const isCorrect = optionValue === question.Answer;
            const isSelected = selectedAnswers[index] === optionValue;

            const optionText = question[optionValue];

            let optionHTML;
            if (isCorrect) {
              optionHTML = `<span class="correct-answer">${optionText} (Correct Answer)</span>`;
            } else if (isSelected) {
              optionHTML = `<span class="wrong-answer">${optionText} (Your Answer)</span>`;
            } else {
              optionHTML = optionText;
            }

            reviewItem.innerHTML += `${optionHTML} <br>`;
          }

          reviewItem.innerHTML += `</p>`;
          reviewContainer.appendChild(reviewItem);
        });

        const totalMarksElement = document.createElement('p');
        totalMarksElement.classList.add('total-marks');
        totalMarksElement.textContent = `Your total score is: ${totalMarks}`;
        reviewContainer.appendChild(totalMarksElement);

        document.body.appendChild(reviewContainer);
      }

      function endExam() {
        clearInterval(timerInterval);
        examEnded = true;
        saveAnswer();
        calculateTotalMarks();
        showMessage(`Test ended early! Your total score is: ${totalMarks}`, 'info');
        showReview();
      }

      saveProgressBtn.addEventListener('click', () => {
        localStorage.setItem('selectedAnswers', JSON.stringify(selectedAnswers));
        localStorage.setItem('currentQuestionIndex', currentQuestionIndex);
        showMessage('Progress saved!', 'success');
      });

      reviewBtn.addEventListener('click', () => {
        if (document.getElementById('review-container')) return; // Prevent creating multiple review containers
        showReview();
      });

      endExamBtn.addEventListener('click', endExam);

      prevBtn.addEventListener('click', () => {
        saveAnswer();
        if (currentQuestionIndex > 0) {
          currentQuestionIndex--;
          renderQuestion(currentQuestionIndex);
        }
      });

      nextBtn.addEventListener('click', () => {
        saveAnswer();
        if (currentQuestionIndex < questions.length - 1) {
          currentQuestionIndex++;
          renderQuestion(currentQuestionIndex);
        }
      });

      renderQuestion(currentQuestionIndex);
      startTimer();

    } catch (error) {
      console.error('Error parsing JSON data:', error);
    }
  </script>

  <style>
    /* Google Forms inspired styling */

    body {
      font-family: 'Roboto', sans-serif;
      background-color: #f8f9fa;
      color: #202124;
      margin: 0;
      padding: 20px;
      display: flex;
      justify-content: center;
      align-items: flex-start;
      min-height: 100vh;
    }

    #form-container {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06);
      padding: 20px;
      max-width: 600px;
      width: 100%;
    }

    #progress-bar-container {
      width: 100%;
      background-color: #e0e0e0;
      height: 8px;
      border-radius: 4px;
      margin-bottom: 10px;
    }

    #progress-bar {
      height: 100%;
      background-color: #4285f4;
      width: 0;
      border-radius: 4px;
    }

    h3 {
      margin-top: 0;
      font-size: 20px;
      font-weight: 500;
    }

    .question-text {
      font-size: 18px;
      font-weight: 400;
    }

    .form-check {
      margin-bottom: 10px;
    }

    .form-check-label {
      font-size: 16px;
      margin-left: 8px;
    }

    .form-button {
      background-color: #4285f4;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      margin-right: 10px;
      font-size: 14px;
    }

    .form-button:disabled {
      background-color: #a0c4ff;
      cursor: not-allowed;
    }

    #review-btn {
      background-color: #34a853;
      margin-top: 10px;
    }

    #timer {
      text-align: right;
      font-size: 16px;
      font-weight: 500;
      margin-bottom: 10px;
    }

    .message-box {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background-color: #333;
      color: #fff;
      padding: 10px 20px;
      border-radius: 5px;
      opacity: 0.9;
      z-index: 1000;
    }

    .message-box.info {
      background-color: #333;
    }

    .message-box.success {
      background-color: #28a745;
    }

    .message-box.warning {
      background-color: #ffc107;
    }

    .hidden {
      display: none;
    }

    .review-item {
      background-color: #f1f3f4;
      border-radius: 5px;
      padding: 15px;
      margin-bottom: 10px;
    }

    .correct-answer {
      color: #34a853;
      font-weight: bold;
    }

    .wrong-answer {
      color: #ea4335;
      font-weight: bold;
    }

    .total-marks {
      font-size: 18px;
      font-weight: bold;
      text-align: center;
      margin-top: 20px;
    }
  </style>
</body>
