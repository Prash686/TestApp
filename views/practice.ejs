<% layout('boilerplate') %>
<body class="bg-light">
  <div class="container mt-5">
    <h3 class="text-center mb-4">Question <span id="question-number">1</span> of <%= allquestions.length %></h3>

    <!-- Hidden input field to store the JSON string of questions -->
    <input type="hidden" id="questions-data" value="<%- JSON.stringify(allquestions).replace(/"/g, '&quot;') %>">

    <form method="GET" action="/submit">
      <div id="question-container" class="bg-white p-4 rounded shadow-lg mb-4">
        <!-- The first question will be rendered here by JavaScript -->
      </div>

      <div class="d-flex justify-content-between align-items-center">
        <button type="button" id="prev-btn" class="btn btn-primary btn-lg" disabled>Previous</button>
        <div>
          <button type="button" id="next-btn" class="btn btn-primary btn-lg mx-2">Next</button>
          <button type="button" id="submit-btn" class="btn btn-success btn-lg">Submit</button>
        </div>
      </div>
    </form>

    <!-- Modal Structure -->
    <div id="modal" class="modal fade" tabindex="-1" role="dialog">
      <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content rounded-3 shadow-lg">
          <div class="modal-header bg-info text-white">
            <h5 class="modal-title">Result</h5>
            <button type="button" class="btn-close" id="modal-close" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p id="modal-message" class="text-center"></p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" id="modal-close-btn">Close</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      let jsonData = document.getElementById('questions-data').value;
      const cleanedJsonData = jsonData.replace(/&quot;/g, '"');
      const questions = JSON.parse(cleanedJsonData);

      const questionContainer = document.getElementById('question-container');
      const questionNumber = document.getElementById('question-number');
      const prevBtn = document.getElementById('prev-btn');
      const nextBtn = document.getElementById('next-btn');
      const submitBtn = document.getElementById('submit-btn');
      const modal = new bootstrap.Modal(document.getElementById('modal'));
      const modalMessage = document.getElementById('modal-message');
      const modalClose = document.getElementById('modal-close');
      const modalCloseBtn = document.getElementById('modal-close-btn');

      let currentQuestionIndex = 0;
      const selectedAnswers = {};

      function renderQuestion(index) {
        if (!questions || questions.length === 0) {
          questionContainer.textContent = 'No questions available.';
          return;
        }

        const question = questions[index];
        questionContainer.innerHTML = '';

        const questionText = document.createElement('p');
        questionText.textContent = `Q. ${question.question} (marks ${question.marks})`;
        questionText.classList.add('mb-3', 'fw-bold');
        questionContainer.appendChild(questionText);

        for (let i = 1; i <= 4; i++) {
          const div = document.createElement('div');
          div.classList.add('form-check');

          const input = document.createElement('input');
          input.type = 'radio';
          input.classList.add('form-check-input');
          input.name = 'answer';
          input.id = `option${i}`;
          input.value = `option${i}`;

          const label = document.createElement('label');
          label.classList.add('form-check-label');
          label.setAttribute('for', `option${i}`);
          label.textContent = `${i}) ${question[`option${i}`]}`;

          if (selectedAnswers[index] === i.toString()) {
            input.checked = true;
          }

          div.appendChild(input);
          div.appendChild(label);
          questionContainer.appendChild(div);
        }

        questionNumber.textContent = index + 1;
        prevBtn.disabled = index === 0;
        nextBtn.disabled = index === questions.length - 1;
      }

      function saveAnswer() {
        const selectedOption = document.querySelector('input[name="answer"]:checked');
        if (selectedOption) {
          selectedAnswers[currentQuestionIndex] = selectedOption.value;
        }
      }

      function showModal(message) {
        modalMessage.textContent = message;
        modal.show();
      }

      modalClose.addEventListener('click', () => {
        modal.hide();
      });

      modalCloseBtn.addEventListener('click', () => {
        modal.hide();
      });

      function checkAnswer() {
        const selectedOption = document.querySelector('input[name="answer"]:checked');
        if (selectedOption) {
          const correctAnswer = questions[currentQuestionIndex].Answer;
          if (selectedOption.value === correctAnswer) {
            showModal('Correct Answer!');
          } else {
            showModal('Wrong Answer!');
          }
        } else {
          showModal('Please select an answer.');
        }
      }

      prevBtn.addEventListener('click', () => {
        saveAnswer();
        if (currentQuestionIndex > 0) {
          currentQuestionIndex--;
          renderQuestion(currentQuestionIndex);
        }
      });

      nextBtn.addEventListener('click', () => {
        saveAnswer();
        if (currentQuestionIndex < questions.length - 1) {
          currentQuestionIndex++;
          renderQuestion(currentQuestionIndex);
        }
      });

      submitBtn.addEventListener('click', () => {
        saveAnswer();
        checkAnswer();
      });

      renderQuestion(currentQuestionIndex);
    });
  </script>

  <!-- Bootstrap JavaScript Bundle with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <!-- Custom Styles -->
  <style>
    body {
      font-family: 'Roboto', sans-serif;
      background-color: #f8f9fa; /* Keeping a light background for better readability */
    }
  
    #question-container {
      background-color: #ffffff;
      border-radius: 0.5rem;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      transition: box-shadow 0.3s ease-in-out;
    }
  
    #question-container:hover {
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
    }
  
    .btn-primary {
      background-color: #3c2559;
      border-color: #3c2559;
      transition: background-color 0.2s ease;
    }
  
    .btn-primary:hover {
      background-color: #2a1a41;
      border-color: #241438;
    }
  
    .btn-success {
      background-color: #3c2559;
      border-color: #3c2559;
      transition: background-color 0.2s ease;
    }
  
    .btn-success:hover {
      background-color: #2a1a41;
      border-color: #241438;
    }
  
    .modal-content {
      border-radius: 1rem;
    }
  
    .modal-header {
      background-color: #3c2559;
      color: #fff;
    }
  
    .modal-body {
      font-size: 1.1rem;
      color: #3c2559;
    }
  
    .modal-footer .btn {
      font-size: 1rem;
      background-color: #3c2559;
      border-color: #3c2559;
    }
  
    .modal-footer .btn:hover {
      background-color: #2a1a41;
      border-color: #241438;
    }
  
    h3 {
      color: #3c2559;
    }
  
    p {
      color: #3c2559;
    }
  
    label {
      color: #3c2559;
    }
  
    .form-check-input:checked {
      background-color: #3c2559;
      border-color: #3c2559;
    }
  </style>
  
</body>
